import { readReply } from "./reply.ts";
import { ErrorReplyError } from "../../errors.ts";
import { encodeCommand } from "../shared/command.ts";
async function writeRequest(writer, command, args) {
    const request = encodeCommand(command, args);
    await writer.write(request);
}
export async function sendCommand(writer, reader, command, args, returnUint8Arrays) {
    await writeRequest(writer, command, args);
    await writer.flush();
    return readReply(reader, returnUint8Arrays);
}
export async function sendCommands(writer, reader, commands) {
    for (const { command , args  } of commands){
        await writeRequest(writer, command, args);
    }
    await writer.flush();
    const ret = [];
    for(let i = 0; i < commands.length; i++){
        try {
            const rep = await readReply(reader, commands[i].returnUint8Arrays);
            ret.push(rep);
        } catch (e) {
            if (e instanceof ErrorReplyError) {
                ret.push(e);
            } else {
                throw e;
            }
        }
    }
    return ret;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImh0dHBzOi8vZGVuby5sYW5kL3gvcmVkaXNAdjAuMzIuMC9wcm90b2NvbC9kZW5vX3N0cmVhbXMvY29tbWFuZC50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBCdWZSZWFkZXIgfSBmcm9tIFwiLi4vLi4vdmVuZG9yL2h0dHBzL2Rlbm8ubGFuZC9zdGQvaW8vYnVmX3JlYWRlci50c1wiO1xuaW1wb3J0IHsgQnVmV3JpdGVyIH0gZnJvbSBcIi4uLy4uL3ZlbmRvci9odHRwcy9kZW5vLmxhbmQvc3RkL2lvL2J1Zl93cml0ZXIudHNcIjtcbmltcG9ydCB7IHJlYWRSZXBseSB9IGZyb20gXCIuL3JlcGx5LnRzXCI7XG5pbXBvcnQgeyBFcnJvclJlcGx5RXJyb3IgfSBmcm9tIFwiLi4vLi4vZXJyb3JzLnRzXCI7XG5pbXBvcnQgdHlwZSB7IFJlZGlzUmVwbHksIFJlZGlzVmFsdWUgfSBmcm9tIFwiLi4vc2hhcmVkL3R5cGVzLnRzXCI7XG5pbXBvcnQgeyBlbmNvZGVDb21tYW5kIH0gZnJvbSBcIi4uL3NoYXJlZC9jb21tYW5kLnRzXCI7XG5pbXBvcnQgdHlwZSB7IENvbW1hbmQgfSBmcm9tIFwiLi4vc2hhcmVkL3Byb3RvY29sLnRzXCI7XG5cbmFzeW5jIGZ1bmN0aW9uIHdyaXRlUmVxdWVzdChcbiAgd3JpdGVyOiBCdWZXcml0ZXIsXG4gIGNvbW1hbmQ6IHN0cmluZyxcbiAgYXJnczogUmVkaXNWYWx1ZVtdLFxuKSB7XG4gIGNvbnN0IHJlcXVlc3QgPSBlbmNvZGVDb21tYW5kKGNvbW1hbmQsIGFyZ3MpO1xuICBhd2FpdCB3cml0ZXIud3JpdGUocmVxdWVzdCk7XG59XG5cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBzZW5kQ29tbWFuZChcbiAgd3JpdGVyOiBCdWZXcml0ZXIsXG4gIHJlYWRlcjogQnVmUmVhZGVyLFxuICBjb21tYW5kOiBzdHJpbmcsXG4gIGFyZ3M6IFJlZGlzVmFsdWVbXSxcbiAgcmV0dXJuVWludDhBcnJheXM/OiBib29sZWFuLFxuKTogUHJvbWlzZTxSZWRpc1JlcGx5PiB7XG4gIGF3YWl0IHdyaXRlUmVxdWVzdCh3cml0ZXIsIGNvbW1hbmQsIGFyZ3MpO1xuICBhd2FpdCB3cml0ZXIuZmx1c2goKTtcbiAgcmV0dXJuIHJlYWRSZXBseShyZWFkZXIsIHJldHVyblVpbnQ4QXJyYXlzKTtcbn1cblxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIHNlbmRDb21tYW5kcyhcbiAgd3JpdGVyOiBCdWZXcml0ZXIsXG4gIHJlYWRlcjogQnVmUmVhZGVyLFxuICBjb21tYW5kczogQ29tbWFuZFtdLFxuKTogUHJvbWlzZTwoUmVkaXNSZXBseSB8IEVycm9yUmVwbHlFcnJvcilbXT4ge1xuICBmb3IgKGNvbnN0IHsgY29tbWFuZCwgYXJncyB9IG9mIGNvbW1hbmRzKSB7XG4gICAgYXdhaXQgd3JpdGVSZXF1ZXN0KHdyaXRlciwgY29tbWFuZCwgYXJncyk7XG4gIH1cbiAgYXdhaXQgd3JpdGVyLmZsdXNoKCk7XG4gIGNvbnN0IHJldDogKFJlZGlzUmVwbHkgfCBFcnJvclJlcGx5RXJyb3IpW10gPSBbXTtcbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBjb21tYW5kcy5sZW5ndGg7IGkrKykge1xuICAgIHRyeSB7XG4gICAgICBjb25zdCByZXAgPSBhd2FpdCByZWFkUmVwbHkocmVhZGVyLCBjb21tYW5kc1tpXS5yZXR1cm5VaW50OEFycmF5cyk7XG4gICAgICByZXQucHVzaChyZXApO1xuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgIGlmIChlIGluc3RhbmNlb2YgRXJyb3JSZXBseUVycm9yKSB7XG4gICAgICAgIHJldC5wdXNoKGUpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhyb3cgZTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgcmV0dXJuIHJldDtcbn1cbiJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxTQUFTLFNBQVMsUUFBUSxhQUFhO0FBQ3ZDLFNBQVMsZUFBZSxRQUFRLGtCQUFrQjtBQUVsRCxTQUFTLGFBQWEsUUFBUSx1QkFBdUI7QUFHckQsZUFBZSxhQUNiLE1BQWlCLEVBQ2pCLE9BQWUsRUFDZixJQUFrQixFQUNsQjtJQUNBLE1BQU0sVUFBVSxjQUFjLFNBQVM7SUFDdkMsTUFBTSxPQUFPLEtBQUssQ0FBQztBQUNyQjtBQUVBLE9BQU8sZUFBZSxZQUNwQixNQUFpQixFQUNqQixNQUFpQixFQUNqQixPQUFlLEVBQ2YsSUFBa0IsRUFDbEIsaUJBQTJCLEVBQ047SUFDckIsTUFBTSxhQUFhLFFBQVEsU0FBUztJQUNwQyxNQUFNLE9BQU8sS0FBSztJQUNsQixPQUFPLFVBQVUsUUFBUTtBQUMzQixDQUFDO0FBRUQsT0FBTyxlQUFlLGFBQ3BCLE1BQWlCLEVBQ2pCLE1BQWlCLEVBQ2pCLFFBQW1CLEVBQ3dCO0lBQzNDLEtBQUssTUFBTSxFQUFFLFFBQU8sRUFBRSxLQUFJLEVBQUUsSUFBSSxTQUFVO1FBQ3hDLE1BQU0sYUFBYSxRQUFRLFNBQVM7SUFDdEM7SUFDQSxNQUFNLE9BQU8sS0FBSztJQUNsQixNQUFNLE1BQXdDLEVBQUU7SUFDaEQsSUFBSyxJQUFJLElBQUksR0FBRyxJQUFJLFNBQVMsTUFBTSxFQUFFLElBQUs7UUFDeEMsSUFBSTtZQUNGLE1BQU0sTUFBTSxNQUFNLFVBQVUsUUFBUSxRQUFRLENBQUMsRUFBRSxDQUFDLGlCQUFpQjtZQUNqRSxJQUFJLElBQUksQ0FBQztRQUNYLEVBQUUsT0FBTyxHQUFHO1lBQ1YsSUFBSSxhQUFhLGlCQUFpQjtnQkFDaEMsSUFBSSxJQUFJLENBQUM7WUFDWCxPQUFPO2dCQUNMLE1BQU0sRUFBRTtZQUNWLENBQUM7UUFDSDtJQUNGO0lBQ0EsT0FBTztBQUNULENBQUMifQ==